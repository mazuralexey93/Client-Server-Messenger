Коды ответов сервера
JIM-протокол использует коды ошибок HTTP. Перечислим поддерживаемые:
1xx — информационные сообщения:
100 — базовое уведомление;
101 — важное уведомление.
2xx — успешное завершение:
200 — OK;
201 (created) — объект создан;
202 (accepted) — подтверждение.
4xx — ошибка на стороне клиента:
400 — неправильный запрос/JSON-объект;
401 — не авторизован;
402 — неправильный логин/пароль;
403 (forbidden) — пользователь заблокирован;
404 (not found) — пользователь/чат отсутствует на сервере;
409 (conflict) — уже имеется подключение с указанным логином;
410 (gone) — адресат существует, но недоступен (offline).
5xx — ошибка на стороне сервера:
500 — ошибка сервера.


Методы протокола (event)
“event”: “presence” — присутствие. Сервисное сообщение для извещения сервера о присутствии клиента online;
“event”: “prоbe” — проверка присутствия. Сервисное сообщение от сервера для проверки присутствии клиента online;
“event”: “msg” — простое сообщение пользователю или в чат;
“event”: “quit” — отключение от сервера;
“event”: “authenticate” — авторизация на сервере;
“event”: “join” — присоединиться к чату;
“event”: “leave” — покинуть чат.

handlers.TimedRotatingFileHandler(filename [, when [, interval [, backupCount [, encoding [, delay [, utc]]]]]])
 — то же, что и RotatingFileHandler, но циклическое переименование файлов происходит через определенные интервалы
  времени, а не по достижении файлом заданного размера. В аргументе interval передается число,
  определяющее величину интервала в единицах, а в when — строка, определяющая единицы измерения.
  Допустимыми значениями для аргумента when являются:
  S (секунды), M (минуты), H (часы), D (дни), W (недели) и midnight (ротация выполняется в полночь).
   Например, если в аргументе interval передать число 3, а в when — строку D,
     ротация файла журнала будет выполняться каждые три дня.
      Аргумент backupCount определяет максимальное число хранимых резервных копий.
       В аргументе utc передается логический флаг, который определяет,
        должно ли использоваться локальное время (по умолчанию) или время по Гринвичу (UTC).


Настройка приложения для использования модуля logging обычно выполняется в несколько основных этапов:
С помощью функции getLogger() создается несколько объектов класса Logger.
Соответствующим образом устанавливаются значения параметров — например, уровня важности.
Создаются объекты обработчиков различных типов (FileHandler, StreamHandler, SocketHandler и других),
 и устанавливаются соответствующие уровни важности.
Создаются объекты класса Formatter и подключаются к объектам Handler с помощью метода setFormatter().
С помощью метода addHandler() объекты Handler подключаются к объектам Logger.
